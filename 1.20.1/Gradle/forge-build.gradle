architectury {
    platformSetupLoomIde()
    forge()
}

base {
    archivesName = archives_name + "-forge"
}

def generatedResources = project(":common").file("src/generated/resources")
def assetsFolder = project(":common").file("src/main/resources")
sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

loom {
    forge {
        mixinConfig "${archives_name}-common.mixins.json"
        mixinConfig "${archives_name}-forge.mixins.json"
    }
    mixin.defaultRefmapName.set("${archives_name}-forge-refmap.json")
	
	runs {
        data {
            data()
            programArgs "--all", "--mod", "${archives_name}"
            programArgs "--existing", assetsFolder.absolutePath
            programArgs "--output", generatedResources.absolutePath
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_api_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

