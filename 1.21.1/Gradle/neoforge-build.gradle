architectury {
    platformSetupLoomIde()
    neoForge()
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

base {
    archivesName = archives_name + "-neoforge"
}

def generatedResources = project(":common").file("src/generated/resources")
def assetsFolder = project(":common").file("src/main/resources")
sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

loom {
	mixin {
        useLegacyMixinAp = true
    }
    mixin.defaultRefmapName.set("${archives_name}-neoforge-refmap.json")
	
	runs {
        data {
            data()
            programArgs "--all", "--mod", "${archives_name}"
            programArgs "--existing", assetsFolder.absolutePath
            programArgs "--output", generatedResources.absolutePath
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_api_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-neoforge:${mixin_extras_version}"))

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

